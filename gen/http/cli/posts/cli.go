// Code generated by goa v3.21.1, DO NOT EDIT.
//
// posts HTTP client CLI support package
//
// Command:
// $ goa gen goa-tutorial/design

package cli

import (
	"flag"
	"fmt"
	postsc "goa-tutorial/gen/http/posts/client"
	"net/http"
	"os"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `posts (list|show|create|update|delete)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` posts list --page 5382644989160041560 --limit 33` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		postsFlags = flag.NewFlagSet("posts", flag.ContinueOnError)

		postsListFlags     = flag.NewFlagSet("list", flag.ExitOnError)
		postsListPageFlag  = postsListFlags.String("page", "1", "")
		postsListLimitFlag = postsListFlags.String("limit", "10", "")

		postsShowFlags      = flag.NewFlagSet("show", flag.ExitOnError)
		postsShowPostIDFlag = postsShowFlags.String("post-id", "REQUIRED", "記事のUUID")

		postsCreateFlags    = flag.NewFlagSet("create", flag.ExitOnError)
		postsCreateBodyFlag = postsCreateFlags.String("body", "REQUIRED", "")

		postsUpdateFlags      = flag.NewFlagSet("update", flag.ExitOnError)
		postsUpdateBodyFlag   = postsUpdateFlags.String("body", "REQUIRED", "")
		postsUpdatePostIDFlag = postsUpdateFlags.String("post-id", "REQUIRED", "記事のUUID")

		postsDeleteFlags      = flag.NewFlagSet("delete", flag.ExitOnError)
		postsDeletePostIDFlag = postsDeleteFlags.String("post-id", "REQUIRED", "記事ID")
	)
	postsFlags.Usage = postsUsage
	postsListFlags.Usage = postsListUsage
	postsShowFlags.Usage = postsShowUsage
	postsCreateFlags.Usage = postsCreateUsage
	postsUpdateFlags.Usage = postsUpdateUsage
	postsDeleteFlags.Usage = postsDeleteUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "posts":
			svcf = postsFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "posts":
			switch epn {
			case "list":
				epf = postsListFlags

			case "show":
				epf = postsShowFlags

			case "create":
				epf = postsCreateFlags

			case "update":
				epf = postsUpdateFlags

			case "delete":
				epf = postsDeleteFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "posts":
			c := postsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list":
				endpoint = c.List()
				data, err = postsc.BuildListPayload(*postsListPageFlag, *postsListLimitFlag)
			case "show":
				endpoint = c.Show()
				data, err = postsc.BuildShowPayload(*postsShowPostIDFlag)
			case "create":
				endpoint = c.Create()
				data, err = postsc.BuildCreatePayload(*postsCreateBodyFlag)
			case "update":
				endpoint = c.Update()
				data, err = postsc.BuildUpdatePayload(*postsUpdateBodyFlag, *postsUpdatePostIDFlag)
			case "delete":
				endpoint = c.Delete()
				data, err = postsc.BuildDeletePayload(*postsDeletePostIDFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// postsUsage displays the usage of the posts command and its subcommands.
func postsUsage() {
	fmt.Fprintf(os.Stderr, `記事を管理するAPI
Usage:
    %[1]s [globalflags] posts COMMAND [flags]

COMMAND:
    list: 記事一覧
    show: 記事詳細の取得
    create: 記事作成
    update: 記事更新
    delete: 記事削除

Additional help:
    %[1]s posts COMMAND --help
`, os.Args[0])
}
func postsListUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] posts list -page INT -limit INT

記事一覧
    -page INT: 
    -limit INT: 

Example:
    %[1]s posts list --page 5382644989160041560 --limit 33
`, os.Args[0])
}

func postsShowUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] posts show -post-id STRING

記事詳細の取得
    -post-id STRING: 記事のUUID

Example:
    %[1]s posts show --post-id "afb12607-ff99-4b83-b2ad-28d04b016165"
`, os.Args[0])
}

func postsCreateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] posts create -body JSON

記事作成
    -body JSON: 

Example:
    %[1]s posts create --body '{
      "description": "説明",
      "title": "タイトル"
   }'
`, os.Args[0])
}

func postsUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] posts update -body JSON -post-id STRING

記事更新
    -body JSON: 
    -post-id STRING: 記事のUUID

Example:
    %[1]s posts update --body '{
      "description": "説明",
      "title": "タイトル"
   }' --post-id "c7c00260-b8de-454c-ac0d-c3ce607da360"
`, os.Args[0])
}

func postsDeleteUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] posts delete -post-id STRING

記事削除
    -post-id STRING: 記事ID

Example:
    %[1]s posts delete --post-id "f4c86146-6616-41eb-9c3e-e4af73b58132"
`, os.Args[0])
}
