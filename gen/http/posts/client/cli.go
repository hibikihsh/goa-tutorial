// Code generated by goa v3.21.1, DO NOT EDIT.
//
// posts HTTP client CLI support package
//
// Command:
// $ goa gen goa-tutorial/design

package client

import (
	"encoding/json"
	"fmt"
	posts "goa-tutorial/gen/posts"
	"strconv"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// BuildListPayload builds the payload for the posts list endpoint from CLI
// flags.
func BuildListPayload(postsListPage string, postsListLimit string) (*posts.ListPayload, error) {
	var err error
	var page int
	{
		if postsListPage != "" {
			var v int64
			v, err = strconv.ParseInt(postsListPage, 10, strconv.IntSize)
			page = int(v)
			if err != nil {
				return nil, fmt.Errorf("invalid value for page, must be INT")
			}
			if page < 1 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("page", page, 1, true))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var limit int
	{
		if postsListLimit != "" {
			var v int64
			v, err = strconv.ParseInt(postsListLimit, 10, strconv.IntSize)
			limit = int(v)
			if err != nil {
				return nil, fmt.Errorf("invalid value for limit, must be INT")
			}
			if limit < 1 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("limit", limit, 1, true))
			}
			if limit > 100 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("limit", limit, 100, false))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	v := &posts.ListPayload{}
	v.Page = page
	v.Limit = limit

	return v, nil
}

// BuildShowPayload builds the payload for the posts show endpoint from CLI
// flags.
func BuildShowPayload(postsShowPostID string) (*posts.ShowPayload, error) {
	var err error
	var postID string
	{
		postID = postsShowPostID
		err = goa.MergeErrors(err, goa.ValidateFormat("postID", postID, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	v := &posts.ShowPayload{}
	v.PostID = postID

	return v, nil
}

// BuildCreatePayload builds the payload for the posts create endpoint from CLI
// flags.
func BuildCreatePayload(postsCreateBody string) (*posts.PostInput, error) {
	var err error
	var body CreateRequestBody
	{
		err = json.Unmarshal([]byte(postsCreateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"description\": \"説明\",\n      \"title\": \"タイトル\"\n   }'")
		}
	}
	v := &posts.PostInput{
		Title:       body.Title,
		Description: body.Description,
	}

	return v, nil
}

// BuildUpdatePayload builds the payload for the posts update endpoint from CLI
// flags.
func BuildUpdatePayload(postsUpdateBody string, postsUpdatePostID string) (*posts.UpdatePayload, error) {
	var err error
	var body UpdateRequestBody
	{
		err = json.Unmarshal([]byte(postsUpdateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"description\": \"説明\",\n      \"title\": \"タイトル\"\n   }'")
		}
		if body.Title != nil {
			if utf8.RuneCountInString(*body.Title) < 1 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.title", *body.Title, utf8.RuneCountInString(*body.Title), 1, true))
			}
		}
		if body.Description != nil {
			if utf8.RuneCountInString(*body.Description) < 1 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 1, true))
			}
		}
		if err != nil {
			return nil, err
		}
	}
	var postID string
	{
		postID = postsUpdatePostID
		err = goa.MergeErrors(err, goa.ValidateFormat("postID", postID, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	v := &posts.UpdatePayload{
		Title:       body.Title,
		Description: body.Description,
	}
	v.PostID = postID

	return v, nil
}

// BuildDeletePayload builds the payload for the posts delete endpoint from CLI
// flags.
func BuildDeletePayload(postsDeletePostID string) (*posts.DeletePayload, error) {
	var err error
	var postID string
	{
		postID = postsDeletePostID
		err = goa.MergeErrors(err, goa.ValidateFormat("postID", postID, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	v := &posts.DeletePayload{}
	v.PostID = postID

	return v, nil
}
