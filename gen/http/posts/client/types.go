// Code generated by goa v3.21.1, DO NOT EDIT.
//
// posts HTTP client types
//
// Command:
// $ goa gen goa-tutorial/design

package client

import (
	posts "goa-tutorial/gen/posts"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "posts" service "create" endpoint HTTP
// request body.
type CreateRequestBody struct {
	// タイトル
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// 説明
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
}

// UpdateRequestBody is the type of the "posts" service "update" endpoint HTTP
// request body.
type UpdateRequestBody struct {
	// タイトル
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// 説明
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
}

// ListResponseBody is the type of the "posts" service "list" endpoint HTTP
// response body.
type ListResponseBody []*PostResponse

// ShowResponseBody is the type of the "posts" service "show" endpoint HTTP
// response body.
type ShowResponseBody struct {
	// 記事ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// タイトル
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// 説明
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
}

// CreateResponseBody is the type of the "posts" service "create" endpoint HTTP
// response body.
type CreateResponseBody struct {
	// 記事ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// タイトル
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// 説明
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
}

// UpdateResponseBody is the type of the "posts" service "update" endpoint HTTP
// response body.
type UpdateResponseBody struct {
	// 記事ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// タイトル
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// 説明
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
}

// ShowNotFoundResponseBody is the type of the "posts" service "show" endpoint
// HTTP response body for the "not_found" error.
type ShowNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateNotFoundResponseBody is the type of the "posts" service "update"
// endpoint HTTP response body for the "not_found" error.
type UpdateNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DeleteNotFoundResponseBody is the type of the "posts" service "delete"
// endpoint HTTP response body for the "not_found" error.
type DeleteNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// PostResponse is used to define fields on response body types.
type PostResponse struct {
	// 記事ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// タイトル
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// 説明
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
}

// NewCreateRequestBody builds the HTTP request body from the payload of the
// "create" endpoint of the "posts" service.
func NewCreateRequestBody(p *posts.PostInput) *CreateRequestBody {
	body := &CreateRequestBody{
		Title:       p.Title,
		Description: p.Description,
	}
	return body
}

// NewUpdateRequestBody builds the HTTP request body from the payload of the
// "update" endpoint of the "posts" service.
func NewUpdateRequestBody(p *posts.UpdatePayload) *UpdateRequestBody {
	body := &UpdateRequestBody{
		Title:       p.Title,
		Description: p.Description,
	}
	return body
}

// NewListPostOK builds a "posts" service "list" endpoint result from a HTTP
// "OK" response.
func NewListPostOK(body []*PostResponse) []*posts.Post {
	v := make([]*posts.Post, len(body))
	for i, val := range body {
		v[i] = unmarshalPostResponseToPostsPost(val)
	}

	return v
}

// NewShowPostOK builds a "posts" service "show" endpoint result from a HTTP
// "OK" response.
func NewShowPostOK(body *ShowResponseBody) *posts.Post {
	v := &posts.Post{
		ID:          body.ID,
		Title:       *body.Title,
		Description: *body.Description,
	}

	return v
}

// NewShowNotFound builds a posts service show endpoint not_found error.
func NewShowNotFound(body *ShowNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreatePostCreated builds a "posts" service "create" endpoint result from
// a HTTP "Created" response.
func NewCreatePostCreated(body *CreateResponseBody) *posts.Post {
	v := &posts.Post{
		ID:          body.ID,
		Title:       *body.Title,
		Description: *body.Description,
	}

	return v
}

// NewUpdatePostOK builds a "posts" service "update" endpoint result from a
// HTTP "OK" response.
func NewUpdatePostOK(body *UpdateResponseBody) *posts.Post {
	v := &posts.Post{
		ID:          body.ID,
		Title:       *body.Title,
		Description: *body.Description,
	}

	return v
}

// NewUpdateNotFound builds a posts service update endpoint not_found error.
func NewUpdateNotFound(body *UpdateNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewDeleteNotFound builds a posts service delete endpoint not_found error.
func NewDeleteNotFound(body *DeleteNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateShowResponseBody runs the validations defined on ShowResponseBody
func ValidateShowResponseBody(body *ShowResponseBody) (err error) {
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	if body.Title != nil {
		if utf8.RuneCountInString(*body.Title) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.title", *body.Title, utf8.RuneCountInString(*body.Title), 1, true))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 1, true))
		}
	}
	return
}

// ValidateCreateResponseBody runs the validations defined on CreateResponseBody
func ValidateCreateResponseBody(body *CreateResponseBody) (err error) {
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	if body.Title != nil {
		if utf8.RuneCountInString(*body.Title) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.title", *body.Title, utf8.RuneCountInString(*body.Title), 1, true))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 1, true))
		}
	}
	return
}

// ValidateUpdateResponseBody runs the validations defined on UpdateResponseBody
func ValidateUpdateResponseBody(body *UpdateResponseBody) (err error) {
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	if body.Title != nil {
		if utf8.RuneCountInString(*body.Title) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.title", *body.Title, utf8.RuneCountInString(*body.Title), 1, true))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 1, true))
		}
	}
	return
}

// ValidateShowNotFoundResponseBody runs the validations defined on
// show_not_found_response_body
func ValidateShowNotFoundResponseBody(body *ShowNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateNotFoundResponseBody runs the validations defined on
// update_not_found_response_body
func ValidateUpdateNotFoundResponseBody(body *UpdateNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateDeleteNotFoundResponseBody runs the validations defined on
// delete_not_found_response_body
func ValidateDeleteNotFoundResponseBody(body *DeleteNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidatePostResponse runs the validations defined on PostResponse
func ValidatePostResponse(body *PostResponse) (err error) {
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	if body.Title != nil {
		if utf8.RuneCountInString(*body.Title) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.title", *body.Title, utf8.RuneCountInString(*body.Title), 1, true))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 1, true))
		}
	}
	return
}
