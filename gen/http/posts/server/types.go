// Code generated by goa v3.21.1, DO NOT EDIT.
//
// posts HTTP server types
//
// Command:
// $ goa gen goa-tutorial/design

package server

import (
	posts "goa-tutorial/gen/posts"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "posts" service "create" endpoint HTTP
// request body.
type CreateRequestBody struct {
	// タイトル
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// 説明
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
}

// UpdateRequestBody is the type of the "posts" service "update" endpoint HTTP
// request body.
type UpdateRequestBody struct {
	// タイトル
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// 説明
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
}

// ListResponseBody is the type of the "posts" service "list" endpoint HTTP
// response body.
type ListResponseBody []*PostResponse

// ShowResponseBody is the type of the "posts" service "show" endpoint HTTP
// response body.
type ShowResponseBody struct {
	// 記事ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// タイトル
	Title string `form:"title" json:"title" xml:"title"`
	// 説明
	Description string `form:"description" json:"description" xml:"description"`
}

// CreateResponseBody is the type of the "posts" service "create" endpoint HTTP
// response body.
type CreateResponseBody struct {
	// 記事ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// タイトル
	Title string `form:"title" json:"title" xml:"title"`
	// 説明
	Description string `form:"description" json:"description" xml:"description"`
}

// UpdateResponseBody is the type of the "posts" service "update" endpoint HTTP
// response body.
type UpdateResponseBody struct {
	// 記事ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// タイトル
	Title string `form:"title" json:"title" xml:"title"`
	// 説明
	Description string `form:"description" json:"description" xml:"description"`
}

// ShowNotFoundResponseBody is the type of the "posts" service "show" endpoint
// HTTP response body for the "not_found" error.
type ShowNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateNotFoundResponseBody is the type of the "posts" service "update"
// endpoint HTTP response body for the "not_found" error.
type UpdateNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteNotFoundResponseBody is the type of the "posts" service "delete"
// endpoint HTTP response body for the "not_found" error.
type DeleteNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// PostResponse is used to define fields on response body types.
type PostResponse struct {
	// 記事ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// タイトル
	Title string `form:"title" json:"title" xml:"title"`
	// 説明
	Description string `form:"description" json:"description" xml:"description"`
}

// NewListResponseBody builds the HTTP response body from the result of the
// "list" endpoint of the "posts" service.
func NewListResponseBody(res []*posts.Post) ListResponseBody {
	body := make([]*PostResponse, len(res))
	for i, val := range res {
		body[i] = marshalPostsPostToPostResponse(val)
	}
	return body
}

// NewShowResponseBody builds the HTTP response body from the result of the
// "show" endpoint of the "posts" service.
func NewShowResponseBody(res *posts.Post) *ShowResponseBody {
	body := &ShowResponseBody{
		ID:          res.ID,
		Title:       res.Title,
		Description: res.Description,
	}
	return body
}

// NewCreateResponseBody builds the HTTP response body from the result of the
// "create" endpoint of the "posts" service.
func NewCreateResponseBody(res *posts.Post) *CreateResponseBody {
	body := &CreateResponseBody{
		ID:          res.ID,
		Title:       res.Title,
		Description: res.Description,
	}
	return body
}

// NewUpdateResponseBody builds the HTTP response body from the result of the
// "update" endpoint of the "posts" service.
func NewUpdateResponseBody(res *posts.Post) *UpdateResponseBody {
	body := &UpdateResponseBody{
		ID:          res.ID,
		Title:       res.Title,
		Description: res.Description,
	}
	return body
}

// NewShowNotFoundResponseBody builds the HTTP response body from the result of
// the "show" endpoint of the "posts" service.
func NewShowNotFoundResponseBody(res *goa.ServiceError) *ShowNotFoundResponseBody {
	body := &ShowNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateNotFoundResponseBody builds the HTTP response body from the result
// of the "update" endpoint of the "posts" service.
func NewUpdateNotFoundResponseBody(res *goa.ServiceError) *UpdateNotFoundResponseBody {
	body := &UpdateNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteNotFoundResponseBody builds the HTTP response body from the result
// of the "delete" endpoint of the "posts" service.
func NewDeleteNotFoundResponseBody(res *goa.ServiceError) *DeleteNotFoundResponseBody {
	body := &DeleteNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListPayload builds a posts service list endpoint payload.
func NewListPayload(page int, limit int) *posts.ListPayload {
	v := &posts.ListPayload{}
	v.Page = page
	v.Limit = limit

	return v
}

// NewShowPayload builds a posts service show endpoint payload.
func NewShowPayload(postID string) *posts.ShowPayload {
	v := &posts.ShowPayload{}
	v.PostID = postID

	return v
}

// NewCreatePostInput builds a posts service create endpoint payload.
func NewCreatePostInput(body *CreateRequestBody) *posts.PostInput {
	v := &posts.PostInput{
		Title:       body.Title,
		Description: body.Description,
	}

	return v
}

// NewUpdatePayload builds a posts service update endpoint payload.
func NewUpdatePayload(body *UpdateRequestBody, postID string) *posts.UpdatePayload {
	v := &posts.UpdatePayload{
		Title:       body.Title,
		Description: body.Description,
	}
	v.PostID = postID

	return v
}

// NewDeletePayload builds a posts service delete endpoint payload.
func NewDeletePayload(postID string) *posts.DeletePayload {
	v := &posts.DeletePayload{}
	v.PostID = postID

	return v
}

// ValidateCreateRequestBody runs the validations defined on CreateRequestBody
func ValidateCreateRequestBody(body *CreateRequestBody) (err error) {
	if body.Title != nil {
		if utf8.RuneCountInString(*body.Title) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.title", *body.Title, utf8.RuneCountInString(*body.Title), 1, true))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 1, true))
		}
	}
	return
}

// ValidateUpdateRequestBody runs the validations defined on UpdateRequestBody
func ValidateUpdateRequestBody(body *UpdateRequestBody) (err error) {
	if body.Title != nil {
		if utf8.RuneCountInString(*body.Title) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.title", *body.Title, utf8.RuneCountInString(*body.Title), 1, true))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 1, true))
		}
	}
	return
}
